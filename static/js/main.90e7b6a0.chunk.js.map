{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Loader.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","item","onChange","num","removeTodo","useContext","type","id","checked","completed","className","title","onClick","bind","TodoList","todos","handler","loading","length","map","i","key","Loader","style","display","justifyContent","margin","Modal","state","isOpen","Fragment","setState","this","Component","AddTodo","lazy","App","useState","setTodos","setLoading","useEffect","fetch","then","response","json","setTimeout","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","todo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.90e7b6a0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Context = React.createContext();\nexport default Context;","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Context from '../context';\n\nfunction TodoItem({item, onChange, num}) {\n    const {removeTodo} = useContext(Context);\n    return (\n        <li>\n            <div>\n                <strong>{num + 1}</strong>\n                <input type=\"checkbox\" onChange={() => onChange(item.id)} checked={item.completed}/>\n                <span className={item.completed ? 'complete':''}>\n                    {item.title}\n                </span>\n            </div>\n            <button className=\"rm\" onClick={removeTodo.bind(null, item.id)}>&times;</button>\n        </li>\n    );\n}\n\nTodoItem.propTypes = {\n    item: PropTypes.object.isRequired,\n    onChange: PropTypes.func.isRequired\n}\n\nexport default TodoItem;","import React from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\nfunction TodoList({todos, handler, loading}) {\n    return (\n        <div>\n            {todos.length ?\n            <ul>\n                {todos.map((item, i) => {\n                    return  <TodoItem item = {item} key = {item.id} onChange={handler} num={i}/>\n                })}\n            </ul> : (loading ? null:\"No items\")}\n        </div>\n    )\n}\n\nTodoList.propTypes = {\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n    handler: PropTypes.func.isRequired\n}\n\nexport default TodoList;","import React from 'react';\n\nfunction Loader() {\n    return (\n        <div style={{display: 'flex', justifyContent: 'center', margin: '.5rem'}}>\n            <div className=\"lds-spinner\">\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Loader;","import React, { Component } from 'react';\nimport './Modal.css';\n\nexport default class Modal extends React.Component {\n    state = {\n        isOpen: false,\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <button onClick={() => this.setState({isOpen: true})}>Open modal</button>\n                {this.state.isOpen ? \n                    (<div className='modal'>\n                        <div className=\"modal-body\">\n                            <h1>Modal title</h1>\n                            <p>I am awesome modal!!!</p>\n                            <button onClick={() => this.setState({isOpen: false})}>Close modal</button>\n                        </div>\n                    </div>) : ''}\n            </React.Fragment>\n        )\n    }\n}","import React, {useEffect} from 'react';\nimport TodoList from './Todo/TodoList';\nimport Context from './context';\nimport Loader from './Loader';\nimport Modal from './Modal/Modal';\n\nconst AddTodo = React.lazy(() => {return import('./Todo/AddTodo')});\n\nfunction App() {\n\tconst [todos, setTodos] = React.useState([]);\n\tconst [loading, setLoading] = React.useState(true);\n\n\tuseEffect(() => {\n\t\tfetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n\t\t\t.then(response => response.json())\n\t\t\t.then(todos => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetTodos(todos);\n\t\t\t\t\tsetLoading(false);\n\t\t\t\t}, 2000)\n\t\t\t});\n\t}, []);\n\n\tfunction onToggle(id) {\n\t\tsetTodos(\n\t\t\ttodos.map(todo => {\n\t\t\t\tif(todo.id === id) {\n\t\t\t\t\ttodo.completed = !todo.completed;\n\t\t\t\t}\n\t\t\t\treturn todo;\n\t\t\t})\n\t\t)\n\t}\n\n\tfunction removeTodo(id) {\n\t\tsetTodos(\n\t\t\ttodos.filter(item => \n\t\t\t\titem.id !== id\n\t\t\t)\n\t\t);\n\t}\n\n\tfunction addTodo(value) {\n\t\tsetTodos(\n\t\t\ttodos.concat([{title: value, completed: false, id: Date.now()}])\n\t\t)\n\t}\n\n\treturn (\n\t\t<Context.Provider value={{removeTodo}}>\n\t\t\t<div className=\"wrapper\">\n\t\t\t\t<h1>Items list</h1>\n\t\t\t\t<Modal/>\n\t\t\t\t<React.Suspense fallback={<p>Loading...</p>}>\n\t\t\t\t\t<AddTodo onCreate={addTodo}/>\n\t\t\t\t</React.Suspense>\n\t\t\t\t{loading && <Loader/>}\n\t\t\t\t<TodoList todos={todos} handler={onToggle} loading={loading}/>\n\t\t\t</div>\n\t\t</Context.Provider>\n\t);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}